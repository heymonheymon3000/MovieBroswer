plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'kotlin-android-extensions'

}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.moviebrowser"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.example.moviebrowser.TestRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        //testInstrumentationRunnerArguments clearPackageData: 'true'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildTypes.each {
        it.buildConfigField 'String', 'MOVIE_API_KEY', MyMovieDBApiKey
    }
    repositories {
        maven { url "https://maven.google.com" }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    ////////////////////////////////////////////////////////////////////////
    implementation 'androidx.activity:activity-ktx:1.3.0-alpha03'
    implementation 'androidx.fragment:fragment-ktx:1.3.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.3'
    ////////////////////////////////////////////////////////////////////////

    // ViewModel and LiveData (arch components)
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.0"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Coroutines
    def kotlinx_coroutines_core_version = "1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_core_version"
    def kotlinx_coroutines_android_version = "1.4.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_android_version"

    // FirebaseUI for Firebase Auth
    def firebase_ui_auth_version = "7.1.1"
    implementation "com.firebaseui:firebase-ui-auth:$firebase_ui_auth_version"

    // Retrofit
    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    def hilt_viewmodel_version = "1.0.0-alpha03"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_viewmodel_version"

    // -- Room
    def room_version = "2.2.6"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

////    // Glide
    def glide_version = "4.9.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Timber - Logging
    def timber_version = "4.7.1"
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Espresso idling resource - used for testing
    //noinspection GradleDependency
    implementation "androidx.test.espresso:espresso-idling-resource:3.2.0"

    // Unit Test
    //noinspection GradleDependency
    testImplementation 'junit:junit:4.13'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.mockito:mockito-inline:2.21.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.8'
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"

    def fragment_version = "1.3.0-alpha06"
    //noinspection GradleDependency
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    def test_version = "1.3.0"
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.test:core-ktx:$test_version"
    androidTestImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'
    //noinspection GradleDependency
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    //noinspection GradleDependency
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation  "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$hilt_version"
    androidTestImplementation('com.schibsted.spain:barista:3.6.0') {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }

    // Leak Canary
    def leak_canary_version = "2.0-alpha-3"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
}

kapt {
    correctErrorTypes true
}